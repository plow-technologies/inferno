{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE ScopedTypeVariables #-}

module Main where

import Data.List.NonEmpty (NonEmpty ((:|)))
import qualified Data.Map as M
import Data.Set (fromList)
import Inferno.Types.Syntax
import Inferno.Utils.Prettyprinter (showPretty)

main :: IO ()
main = do
  let ast :: Expr () () =
        Let () () (Expl (ExtIdent (Right "bigApp"))) () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig")))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) () (Let () () (Expl (ExtIdent (Right "null"))) () (Tuple () TNil ()) () (Let () () (Expl (ExtIdent (Right "smallTup"))) () (Tuple () (TCons (Lit () (LInt 12314314), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "fadsfdfsadfa"))), Just ()) [(Lit () (LInt 13413241345), Nothing)]) ()) () (Let () () (Expl (ExtIdent (Right "mediumTup"))) () (Tuple () (TCons (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()) [(Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "mediu"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "mediu"))), Nothing)]) ()) () (Let () () (Expl (ExtIdent (Right "bigTup"))) () (Tuple () (TCons (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))), Just ()) [(Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))), Just ()), (One () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig")))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))), Nothing)]) ()) () (Assert () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "thing"))))) (Var () () LocalScope (Expl (ExtIdent (Right "small"))))) () (Assert () (App (App (App (App (App (App (App (App (App (App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "thing"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) (Var () () LocalScope (Expl (ExtIdent (Right "medium"))))) () (Assert () (App (App (App (App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "thing"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) () (Let () () (Expl (ExtIdent (Right "x"))) () (Case () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "thing"))))) (Var () () LocalScope (Expl (ExtIdent (Right "small"))))) () (((), PLit () (LInt 1), (), Lit () (LInt 2)) :| [((), PVar () Nothing, (), Lit () (LInt 3))]) ()) () (Let () () (Expl (ExtIdent (Right "x"))) () (Case () (App (App (App (App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "thing"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) () (((), PTuple () (TCons (PVar () (Just (Ident {unIdent = "biggbig"})), Just ()) (PVar () (Just (Ident {unIdent = "bigbigbig"})), Just ()) [(PVar () (Just (Ident {unIdent = "bigbigbigbig"})), Just ()), (PVar () (Just (Ident {unIdent = "bigbigbigbigbig"})), Just ()), (PVar () (Just (Ident {unIdent = "bigbigbigbigbigbigbig"})), Just ()), (PVar () (Just (Ident {unIdent = "bigbigbigbigbigbigbigbigbig"})), Nothing)]) (), (), Lit () (LInt 2)) :| [((), PVar () Nothing, (), Lit () (LInt 3))]) ()) () (Let () () (Expl (ExtIdent (Right "smallRec"))) () (Record () [(Ident {unIdent = "height"}, Lit () (LInt 2), Just ()), (Ident {unIdent = "weight"}, Tuple () (TCons (Lit () (LDouble 3.54), Just ()) (Lit () (LText "kgs"), Nothing) []) (), Nothing)] ()) () (Let () () (Expl (ExtIdent (Right "bigRec"))) () (Record () [(Ident {unIdent = "height"}, Tuple () (TCons (Lit () (LInt 12314314), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "fadsfdfsadfa"))), Just ()) [(Lit () (LInt 13413241345), Nothing)]) (), Just ()), (Ident {unIdent = "weight"}, Tuple () (TCons (Lit () (LDouble 3.54), Just ()) (Lit () (LText "kgs"), Nothing) []) (), Just ()), (Ident {unIdent = "name"}, Tuple () (TCons (Var () () LocalScope (Expl (ExtIdent (Right "biggbig"))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbig"))), Just ()) [(Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbig"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbig"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbig"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbig"))), Nothing)]) (), Nothing)] ()) () (Let () () (Expl (ExtIdent (Right "smallArr"))) () (Array () [(Lit () (LInt 12314314), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "fadsfdfsadfa"))), Just ()), (Lit () (LInt 13413241345), Just ())] ()) () (Let () () (Expl (ExtIdent (Right "mediumArr"))) () (Array () [(Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "medium"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "mediu"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "mediu"))), Nothing)] ()) () (Let () () (Expl (ExtIdent (Right "bigArr"))) () (Array () [(Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))), Just ()), (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))), Just ()), (One () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig")))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))), Nothing)] ()) () (Let () () (Expl (ExtIdent (Right "arrayComp"))) () (ArrayComp () (App (App (App (App (Var () () LocalScope (Expl (ExtIdent (Right "bigFun")))) (Var () () LocalScope (Expl (ExtIdent (Right "one"))))) (Var () () LocalScope (Expl (ExtIdent (Right "two"))))) (Var () () LocalScope (Expl (ExtIdent (Right "three"))))) (Var () () LocalScope (Expl (ExtIdent (Right "four"))))) () (((), Ident {unIdent = "one"}, (), App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "thing")))), Just ()) :| []) (Just ((), App (Var () () LocalScope (Expl (ExtIdent (Right "one")))) (Var () () LocalScope (Expl (ExtIdent (Right "two")))))) ()) () (Let () () (Expl (ExtIdent (Right "arrayComp"))) () (ArrayComp () (App (App (App (App (App (App (Var () () LocalScope (Expl (ExtIdent (Right "getBitValAndTime")))) (Var () () LocalScope (Expl (ExtIdent (Right "t"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) () (((), Ident {unIdent = "t"}, (), App (App (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "intervalEvery")))) (Bracketed () (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "seconds")))) (Var () () LocalScope (Expl (ExtIdent (Right "intervalStep"))))) ())) (Var () () LocalScope (Expl (ExtIdent (Right "startOfInterval"))))) (Var () () LocalScope (Impl (ExtIdent (Right "now")))), Just ()) :| [((), Ident {unIdent = "one"}, (), App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "thing")))), Just ()), ((), Ident {unIdent = "two"}, (), App (App (Var () () LocalScope (Expl (ExtIdent (Right "some")))) (Var () () LocalScope (Expl (ExtIdent (Right "other"))))) (Var () () LocalScope (Expl (ExtIdent (Right "thing")))), Just ()), ((), Ident {unIdent = "three"}, (), One () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig")))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))), Just ())]) (Just ((), Bracketed () (App (App (App (App (Var () () LocalScope (Expl (ExtIdent (Right "one")))) (Var () () LocalScope (Expl (ExtIdent (Right "two"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bigbigbigbigbigbigbigbigbigbigbig"))))) ())) ()) () (RenameModule () (ModuleName {unModuleName = "mSmall"}) () (ModuleName {unModuleName = "Number"}) () (RenameModule () (ModuleName {unModuleName = "bigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbig"}) () (ModuleName {unModuleName = "Array"}) () (OpenModule () () (ModuleName {unModuleName = "Array"}) [] () (OpenModule () () (ModuleName {unModuleName = "Array"}) [(IVar () (Ident {unIdent = "foo"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Nothing)] () (OpenModule () () (ModuleName {unModuleName = "Array"}) [(IVar () (Ident {unIdent = "foo"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Just ()), (IVar () (Ident {unIdent = "bar"}), Just ()), (IVar () (Ident {unIdent = "baz"}), Nothing)] () (Lit () (LDouble 1.1)))))))))))))))))))))))
  -- Let () () (Impl (ExtIdent (Right "resolution"))) () (App (Var () () LocalScope (Expl (ExtIdent (Right "toResolution")))) (Lit () (LInt 64))) () (LetAnnot () () (ExtIdent (Right "latestBeforeWithArray")) () (ForallTC [TV {unTV = 0}] (fromList []) (ImplType (M.fromList []) (TArr (TArray (TTuple (TCons (TVar (TV {unTV = 0})) (TBase TTime) []))) (TArr (TBase TTime) (TOptional (TVar (TV {unTV = 0}))))))) () (Lam () (((), Just (ExtIdent (Right "arr"))) :| [((), Just (ExtIdent (Right "t")))]) () (Let () () (Expl (ExtIdent (Right "compareTimes"))) () (Lam () (((), Just (ExtIdent (Right "targetTime"))) :| [((), Just (ExtIdent (Right "testValAndTime"))), ((), Just (ExtIdent (Right "lastValAndTime")))]) () (If () (Op (Var () () LocalScope (Expl (ExtIdent (Right "targetTime")))) () () (7, NoFix) LocalScope (Ident {unIdent = "<"}) (Bracketed () (App (Var () () LocalScope (Expl (ExtIdent (Right "snd")))) (Var () () LocalScope (Expl (ExtIdent (Right "testValAndTime"))))) ())) () (Var () () LocalScope (Expl (ExtIdent (Right "lastValAndTime")))) () (Var () () LocalScope (Expl (ExtIdent (Right "testValAndTime")))))) () (Let () () (Expl (ExtIdent (Right "subValues"))) () (Lam () (((), Just (ExtIdent (Right "lastValAndTime"))) :| [((), Just (ExtIdent (Right "testValAndTime")))]) () (Case () (Var () () LocalScope (Expl (ExtIdent (Right "lastValAndTime")))) () (((), PEmpty (), (), If () (Op (Var () () LocalScope (Expl (ExtIdent (Right "t")))) () () (7, NoFix) LocalScope (Ident {unIdent = "<"}) (Bracketed () (App (Var () () LocalScope (Expl (ExtIdent (Right "snd")))) (Var () () LocalScope (Expl (ExtIdent (Right "testValAndTime"))))) ())) () (Empty ()) () (Bracketed () (One () (Var () () LocalScope (Expl (ExtIdent (Right "testValAndTime"))))) ())) :| [((), POne () (PVar () (Just (Ident {unIdent = "ltv"}))), (), One () (Bracketed () (App (App (App (Var () () LocalScope (Expl (ExtIdent (Right "compareTimes")))) (Var () () LocalScope (Expl (ExtIdent (Right "t"))))) (Var () () LocalScope (Expl (ExtIdent (Right "testValAndTime"))))) (Var () () LocalScope (Expl (ExtIdent (Right "ltv"))))) ()))]) ())) () (Bracketed () (App (App (Var () () (Scope (ModuleName {unModuleName = "Option"})) (Expl (ExtIdent (Right "map")))) (Var () () LocalScope (Expl (ExtIdent (Right "fst"))))) (Bracketed () (App (App (App (Var () () (Scope (ModuleName {unModuleName = "Array"})) (Expl (ExtIdent (Right "reduce")))) (Var () () LocalScope (Expl (ExtIdent (Right "subValues"))))) (Empty ())) (Var () () LocalScope (Expl (ExtIdent (Right "arr"))))) ())) ())))) () (Let () () (Expl (ExtIdent (Right "intervalStep"))) () (Bracketed () (App (Var () () LocalScope (Expl (ExtIdent (Right "resolutionToInt")))) (Var () () LocalScope (Impl (ExtIdent (Right "resolution"))))) ()) () (Let () () (Expl (ExtIdent (Right "startOfInterval"))) () (Bracketed () (Op (Var () () LocalScope (Impl (ExtIdent (Right "now")))) () () (9, LeftFix) LocalScope (Ident {unIdent = "-"}) (Bracketed () (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "hours")))) (Lit () (LInt 24))) ())) ()) () (LetAnnot () () (ExtIdent (Right "valueBeforeInterval")) () (ForallTC [] (fromList []) (ImplType (M.fromList []) (TBase TDouble))) () (App (App (App (Var () () (Scope (ModuleName {unModuleName = "Option"})) (Expl (ExtIdent (Right "reduce")))) (Var () () LocalScope (Expl (ExtIdent (Right "id"))))) (Lit () (LDouble 0.0))) (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "latestValueBefore")))) (Var () () LocalScope (Expl (ExtIdent (Right "startOfInterval"))))) (Var () () LocalScope (Expl (ExtIdent (Right "power"))))) ())) () (LetAnnot () () (ExtIdent (Right "bitfieldBeforeInterval")) () (ForallTC [] (fromList []) (ImplType (M.fromList []) (TBase TDouble))) () (App (App (App (Var () () (Scope (ModuleName {unModuleName = "Option"})) (Expl (ExtIdent (Right "reduce")))) (Var () () LocalScope (Expl (ExtIdent (Right "id"))))) (Lit () (LDouble 0.0))) (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "latestValueBefore")))) (Var () () LocalScope (Expl (ExtIdent (Right "startOfInterval"))))) (Var () () LocalScope (Expl (ExtIdent (Right "bitParam"))))) ())) () (LetAnnot () () (ExtIdent (Right "allValuesDuringInterval")) () (ForallTC [] (fromList []) (ImplType (M.fromList []) (TArray (TTuple (TCons (TOptional (TBase TDouble)) (TBase TTime) []))))) () (ArrayComp () (Tuple () (TCons (App (App (Var () () LocalScope (Expl (ExtIdent (Right "valueAtOrAdjacent")))) (Var () () LocalScope (Expl (ExtIdent (Right "power"))))) (Var () () LocalScope (Expl (ExtIdent (Right "t")))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "t"))), Nothing) []) ()) () (((), Ident {unIdent = "t"}, (), App (App (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "intervalEvery")))) (Bracketed () (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "seconds")))) (Var () () LocalScope (Expl (ExtIdent (Right "intervalStep"))))) ())) (Var () () LocalScope (Expl (ExtIdent (Right "startOfInterval"))))) (Var () () LocalScope (Impl (ExtIdent (Right "now")))), Nothing) :| []) Nothing ()) () (LetAnnot () () (ExtIdent (Right "bitfieldArray")) () (ForallTC [] (fromList []) (ImplType (M.fromList []) (TArray (TTuple (TCons (TBase TDouble) (TBase TTime) []))))) () (Let () () (Impl (ExtIdent (Right "resolution"))) () (App (Var () () LocalScope (Expl (ExtIdent (Right "toResolution")))) (Lit () (LInt 1))) () (App (Var () () (Scope (ModuleName {unModuleName = "Array"})) (Expl (ExtIdent (Right "keepSomes")))) (ArrayComp () (App (App (Var () () (Scope (ModuleName {unModuleName = "Option"})) (Expl (ExtIdent (Right "map")))) (Bracketed () (Lam () (((), Just (ExtIdent (Right "v"))) :| []) () (Tuple () (TCons (Var () () LocalScope (Expl (ExtIdent (Right "v"))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "t"))), Nothing) []) ())) ())) (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "valueAt")))) (Var () () LocalScope (Expl (ExtIdent (Right "bitParam"))))) (Var () () LocalScope (Expl (ExtIdent (Right "t"))))) ())) () (((), Ident {unIdent = "t"}, (), App (App (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "intervalEvery")))) (Bracketed () (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "seconds")))) (Lit () (LInt 1))) ())) (Bracketed () (Op (Var () () LocalScope (Impl (ExtIdent (Right "now")))) () () (9, LeftFix) LocalScope (Ident {unIdent = "-"}) (Bracketed () (App (Var () () (Scope (ModuleName {unModuleName = "Time"})) (Expl (ExtIdent (Right "hours")))) (Lit () (LInt 24))) ())) ())) (Var () () LocalScope (Impl (ExtIdent (Right "now")))), Nothing) :| []) Nothing ()))) () (Let () () (Expl (ExtIdent (Right "inPrimaryDischarge"))) () (Lam () (((), Just (ExtIdent (Right "word"))) :| []) () (If () (Bracketed () (Op (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "testBit")))) (Var () () LocalScope (Expl (ExtIdent (Right "word"))))) (Lit () (LInt 4))) ()) () () (3, RightFix) LocalScope (Ident {unIdent = "||"}) (Op (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "testBit")))) (Var () () LocalScope (Expl (ExtIdent (Right "word"))))) (Lit () (LInt 5))) ()) () () (3, RightFix) LocalScope (Ident {unIdent = "||"}) (Op (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "testBit")))) (Var () () LocalScope (Expl (ExtIdent (Right "word"))))) (Lit () (LInt 6))) ()) () () (3, RightFix) LocalScope (Ident {unIdent = "||"}) (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "testBit")))) (Var () () LocalScope (Expl (ExtIdent (Right "word"))))) (Lit () (LInt 7))) ())))) ()) () (Enum () () LocalScope (Ident {unIdent = "false"})) () (Enum () () LocalScope (Ident {unIdent = "true"})))) () (Let () () (Expl (ExtIdent (Right "isCharging"))) () (Lam () (((), Just (ExtIdent (Right "c"))) :| []) () (Op (Var () () LocalScope (Expl (ExtIdent (Right "c")))) () () (7, NoFix) LocalScope (Ident {unIdent = ">"}) (Lit () (LDouble 1.0)))) () (LetAnnot () () (ExtIdent (Right "chargeMappedValuesDuringInterval")) () (ForallTC [] (fromList []) (ImplType (M.fromList []) (TArray (TTuple (TCons (TBase TDouble) (TBase TTime) []))))) () (Let () () (Expl (ExtIdent (Right "replaceNoneWithLastKnown"))) () (Lam () (((), Just (ExtIdent (Right "ASuperLongVariableName"))) :| [((), Just (ExtIdent (Right "ASuperLongVariableName"))), ((), Just (ExtIdent (Right "ASuperLongVariableName"))), ((), Just (ExtIdent (Right "ASuperLongVariableName")))]) () (Case () (Var () () LocalScope (Expl (ExtIdent (Right "optVal")))) () (((), PTuple () (TCons (POne () (PVar () (Just (Ident {unIdent = "v"}))), Just ()) (PVar () (Just (Ident {unIdent = "t"})), Nothing) []) (), (), Tuple () (TCons (Var () () LocalScope (Expl (ExtIdent (Right "v"))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "t"))), Nothing) []) ()) :| [((), PTuple () (TCons (PEmpty (), Just ()) (PVar () (Just (Ident {unIdent = "t"})), Nothing) []) (), (), Let () () (Expl (ExtIdent (Right "val"))) () (Case () (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "latestBeforeWithArray")))) (Var () () LocalScope (Expl (ExtIdent (Right "allValuesDuringInterval"))))) (Var () () LocalScope (Expl (ExtIdent (Right "t"))))) ()) () (((), POne () (POne () (PVar () (Just (Ident {unIdent = "v"})))), (), Var () () LocalScope (Expl (ExtIdent (Right "v")))) :| [((), PVar () Nothing, (), Var () () LocalScope (Expl (ExtIdent (Right "valueBeforeInterval"))))]) ()) () (Tuple () (TCons (Var () () LocalScope (Expl (ExtIdent (Right "val"))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "t"))), Nothing) []) ()))]) ())) () (App (App (Var () () (Scope (ModuleName {unModuleName = "Array"})) (Expl (ExtIdent (Right "map")))) (Var () () LocalScope (Expl (ExtIdent (Right "replaceNoneWithLastKnown"))))) (Var () () LocalScope (Expl (ExtIdent (Right "allValuesDuringInterval")))))) () (Let () () (Expl (ExtIdent (Right "test"))) () (Lam () (((), Just (ExtIdent (Right "valueAndTime"))) :| []) () (Bracketed () (App (App (Var () () LocalScope (Expl (ExtIdent (Right "latestBeforeWithArray")))) (Var () () LocalScope (Expl (ExtIdent (Right "bitfieldArray"))))) (Bracketed () (App (Var () () LocalScope (Expl (ExtIdent (Right "snd")))) (Var () () LocalScope (Expl (ExtIdent (Right "valueAndTime"))))) ())) ())) () (LetAnnot () () (ExtIdent (Right "bigTypeAnnot")) () (ForallTC [TV {unTV = 0}] (fromList [TypeClass {className = "addition", params = [TVar (TV {unTV = 0}), TVar (TV {unTV = 0}), TVar (TV {unTV = 0})]}, TypeClass {className = "numeric", params = [TVar (TV {unTV = 0})]}]) (ImplType (M.fromList [(ExtIdent (Right "now"), TBase TTime)]) (TArr (TArray (TTuple (TCons (TVar (TV {unTV = 0})) (TBase TTime) []))) (TArr (TBase TTime) (TOptional (TVar (TV {unTV = 0}))))))) () (Var () () LocalScope (Expl (ExtIdent (Right "bigThing")))) () (Let () () (Expl (ExtIdent (Right "bigThing"))) () (Tuple () (TCons (Var () () LocalScope (Expl (ExtIdent (Right "ASuperLongVariableName"))), Just ()) (Var () () LocalScope (Expl (ExtIdent (Right "ASuperLongVariableNamet"))), Nothing) [(One () (App (Var () () LocalScope (Expl (ExtIdent (Right "snd")))) (App (Var () () LocalScope (Expl (ExtIdent (Right "snd")))) (Var () () LocalScope (Expl (ExtIdent (Right "ASuperLongVariableNametASuperLongVariableNametASuperLongVariableNametASuperLongVariableNametASuperLongVariableNametASuperLongVariableNamet")))))), Nothing), (Var () () LocalScope (Expl (ExtIdent (Right "ASuperLongVariableNamet"))), Nothing)]) ()) () (Lit () (LDouble 2.0)))))))))))))))
  showPretty ast