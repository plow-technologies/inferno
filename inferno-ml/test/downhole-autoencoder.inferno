// NOTE: first run the python script to obtain
// downhole_autoencoder.ts.pt
let good_input = ML.asTensor2 [
  [1.4700e+02, 0.0000e+00, 1.5400e+02, 0.0000e+00, 1.5100e+02, 0.0000e+00,
  1.6900e+02, 1.0000e-01, 2.1800e+02, 3.0000e-01, 3.0700e+02, 5.0000e-01,
  3.6800e+02, 7.0000e-01, 4.1100e+02, 1.0000e+00, 4.7200e+02, 1.2000e+00,
  5.9400e+02, 1.5000e+00, 7.3600e+02, 1.9000e+00, 8.9800e+02, 2.2000e+00,
  1.0680e+03, 2.6000e+00, 1.2360e+03, 3.0000e+00, 1.4100e+03, 3.4000e+00,
  1.6080e+03, 3.9000e+00, 1.7790e+03, 4.4000e+00, 1.9160e+03, 5.0000e+00,
  1.9870e+03, 5.8000e+00, 2.0090e+03, 6.7000e+00, 2.0200e+03, 7.8000e+00,
  2.0510e+03, 9.2000e+00, 2.1250e+03, 1.0700e+01, 2.2060e+03, 1.2200e+01,
  2.2830e+03, 1.3600e+01, 2.3390e+03, 1.4900e+01, 2.3490e+03, 1.6200e+01,
  2.3160e+03, 1.7400e+01, 2.2520e+03, 1.8600e+01, 2.2200e+03, 1.9800e+01,
  2.1680e+03, 2.1000e+01, 2.1070e+03, 2.2400e+01, 2.0570e+03, 2.3800e+01,
  2.0330e+03, 2.5200e+01, 2.0230e+03, 2.6600e+01, 2.0310e+03, 2.8000e+01,
  2.0830e+03, 2.9300e+01, 2.1420e+03, 3.0600e+01, 2.1950e+03, 3.2000e+01,
  2.2540e+03, 3.3300e+01, 2.2840e+03, 3.4700e+01, 2.2920e+03, 3.6100e+01,
  2.2770e+03, 3.7500e+01, 2.2700e+03, 3.8900e+01, 2.2470e+03, 4.0200e+01,
  2.2530e+03, 4.1500e+01, 2.2630e+03, 4.2700e+01, 2.2570e+03, 4.3800e+01,
  2.2520e+03, 4.4900e+01, 2.2660e+03, 4.6000e+01, 2.2750e+03, 4.7100e+01,
  2.2480e+03, 4.8200e+01, 2.2190e+03, 4.9300e+01, 2.2060e+03, 5.0300e+01,
  2.2040e+03, 5.1300e+01, 2.2060e+03, 5.2200e+01, 2.2290e+03, 5.3100e+01,
  2.2530e+03, 5.3900e+01, 2.2800e+03, 5.4700e+01, 2.3250e+03, 5.5400e+01,
  2.3650e+03, 5.6000e+01, 2.3830e+03, 5.6500e+01, 2.3860e+03, 5.7100e+01,
  2.3760e+03, 5.7600e+01, 2.3450e+03, 5.8000e+01, 2.3020e+03, 5.8300e+01,
  2.2740e+03, 5.8600e+01, 2.2590e+03, 5.8900e+01, 2.2750e+03, 5.9000e+01,
  2.2840e+03, 5.9200e+01, 2.3190e+03, 5.9200e+01, 2.3420e+03, 5.9300e+01,
  2.3280e+03, 5.9400e+01, 2.2870e+03, 5.9500e+01, 2.2560e+03, 5.9500e+01,
  2.2400e+03, 5.9500e+01, 2.1980e+03, 5.9500e+01, 2.1550e+03, 5.9400e+01,
  2.0960e+03, 5.9100e+01, 2.0820e+03, 5.8800e+01, 2.0920e+03, 5.8500e+01,
  2.1280e+03, 5.8100e+01, 2.1690e+03, 5.7700e+01, 2.1940e+03, 5.7300e+01,
  2.2080e+03, 5.6800e+01, 2.2140e+03, 5.6200e+01, 2.2130e+03, 5.5600e+01,
  2.1810e+03, 5.4900e+01, 2.1670e+03, 5.4200e+01, 2.1510e+03, 5.3500e+01,
  2.1440e+03, 5.2700e+01, 2.1350e+03, 5.1800e+01, 2.1440e+03, 5.0900e+01,
  2.1460e+03, 5.0000e+01, 2.1370e+03, 4.9100e+01, 2.1070e+03, 4.8200e+01,
  2.0630e+03, 4.7300e+01, 2.0200e+03, 4.6300e+01, 1.9810e+03, 4.5400e+01,
  1.9460e+03, 4.4500e+01, 1.7830e+03, 4.3800e+01, 1.5100e+03, 4.3600e+01,
  1.2470e+03, 4.3400e+01, 1.1940e+03, 4.3200e+01, 1.2370e+03, 4.3000e+01,
  1.1920e+03, 4.2700e+01, 9.1600e+02, 4.2000e+01, 5.9100e+02, 4.0900e+01,
  4.3600e+02, 3.9600e+01, 3.8100e+02, 3.8100e+01, 3.4000e+02, 3.6500e+01,
  1.9800e+02, 3.5000e+01, 8.4000e+01, 3.3400e+01, 1.0000e+01, 3.2000e+01,
  3.0000e+01, 3.0800e+01, 5.7000e+01, 2.9700e+01, 8.0000e+01, 2.8600e+01,
  1.4700e+02, 2.7400e+01, 2.1100e+02, 2.6200e+01, 2.4300e+02, 2.4900e+01,
  2.2100e+02, 2.3400e+01, 2.1900e+02, 2.1800e+01, 2.0600e+02, 2.0300e+01,
  1.6700e+02, 1.8800e+01, 1.1200e+02, 1.7400e+01, 9.0000e+01, 1.6100e+01,
  8.1000e+01, 1.4900e+01, 6.2000e+01, 1.3800e+01, 5.5000e+01, 1.2600e+01,
  5.5000e+01, 1.1400e+01, 6.1000e+01, 1.0200e+01, 5.0000e+01, 9.0000e+00,
  3.1000e+01, 7.8000e+00, 2.2000e+01, 6.6000e+00, 4.0000e+00, 5.7000e+00,
  0.0000e+00, 4.9000e+00, 9.0000e+00, 4.2000e+00, 3.4000e+01, 3.5000e+00,
  4.1000e+01, 2.9000e+00, 5.8000e+01, 2.4000e+00, 6.2000e+01, 1.8000e+00,
  3.9000e+01, 1.2000e+00, 1.5000e+01, 8.0000e-01, 2.0000e+00, 4.0000e-01,
  2.0000e+00, 2.0000e-01, 2.7000e+01, 1.0000e-01, 8.8000e+01, 0.0000e+00,
  1.3800e+02]]
in
let bad_input = ML.asTensor2 [[if x == 1 then 1234 else 0 | x <- 1 .. 295]] in
let model = ML.loadModel "downhole_autoencoder.ts.pt" in
let get_model_loss = fun input ->
  let outputs = ML.forward model [input] in
  let losses = Array.map (ML.mseLoss input) outputs in
  // TODO this is a really roundabout way of just extracting losses[0]:
  Array.sum (Array.map ML.asScalar losses)
in
let threshold = 50 in
let anomaly_check = fun input ->
  let loss = get_model_loss input in
  (loss, if loss > threshold then "ANOMALY" else "OK")
in
(anomaly_check bad_input, anomaly_check good_input)
// Expected: ANOMALY, OK